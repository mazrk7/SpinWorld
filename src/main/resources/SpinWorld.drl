package spinworld

# List any import classes here.
import java.util.List
import java.util.ArrayList
import java.util.Iterator
import java.lang.Math
import java.lang.Double
import uk.ac.imperial.presage2.core.Action
import uk.ac.imperial.presage2.rules.facts.Agent
import spinworld.RoundType
import spinworld.actions.*
import spinworld.facts.*
import spinworld.network.*
import org.apache.commons.math.stat.descriptive.SummaryStatistics
import uk.ac.imperial.presage2.core.db.StorageService
import uk.ac.imperial.presage2.core.util.random.Random

global org.apache.log4j.Logger logger
global uk.ac.imperial.presage2.core.db.StorageService storage

declare Round
	@role(event)
end

declare Provision
	@role(event)
end

declare Demand
	@role(event)
end

declare Generate
	@role(event)
end

declare Allocate
	@role(event)
end

declare Appropriate
	@role(event)
end

declare CreateNetwork
	@role(event)
end

declare JoinNetwork
	@role(event)
end

declare LeaveNetwork
	@role(event)
end

declare CheckEmptyNetwork
	@role(event)
end

declare LeftNetwork
	network: Network	@key
end
	
declare ProvisionPool
	network: Network	@key
	quantity: double
end

declare AllocationPool
	network: Network	@key
	quantity: double
end

declare Processed
	@role(event)
	act: Object	@key
end

query getMemberOf(Particle p)
	m : MemberOf(particle == p)
end

query networkMembers(Network n)
	m : MemberOf(p : particle, network == n)
end

rule "Prune actions"
	when
		Round($no : number)
		$a : TimeStampedAction(t < $no - 5)
	then
		retract($a)
end

rule "Discard Rounds"
	salience 1000
	when
		$r : Round($no : number)
		$r2 : Round(number < $no)
	then
		logger.info($r);
		retract($r2);
end

rule "Discard Rounds Intermediate"
	salience 1000
	when
		$r : Round($no : number, type == RoundType.APPROPRIATE)
		$r2 : Round(number == $no, type == RoundType.DEMAND)
	then
		logger.info($r);
		retract($r2);
end

rule "Init Provision Pool"
	when
		$n : Network()
		not(ProvisionPool(network == $n))
	then
		insert(new ProvisionPool($n, 0));
end

rule "Init Allocation Pool"
	when
		$n : Network()
		not(AllocationPool(network == $n))
	then
		insert(new AllocationPool($n, 0));
end

rule "AllocationPool mirrors ProvisionPool increases"
	when
		$n : Network()
		$p : ProvisionPool(network == $n, $pq : quantity)
		$a : AllocationPool(network == $n, $aq : quantity, quantity < $pq)
	then
		modify($a) {
			setQuantity($pq);
		}
end

rule "Accumulate Provisions"
	salience 10
    when
		$r : Round(type == RoundType.DEMAND)
		$n : Network()
		$provision : Provision($p : particle, this coincides $r)
		MemberOf(particle == $p, network == $n)
		$pool : ProvisionPool(network == $n)
		not(Processed($provision ;))
    then
    	modify($pool) {
    		setQuantity($pool.getQuantity() + $provision.getQuantity());
    	}
    	
    	insert(new Processed($provision));
        logger.info($provision  + " pool is now " + $pool);
end

rule "Process Demand"
	salience 10
	when
		$r : Round(type == RoundType.DEMAND)
		$d : Demand(this coincides $r, $p : particle, $q : quantity)
		not(Processed($d ;))
	then
		modify($p) {
			setD($q);
		}
		
		insert(new Processed($d));
		logger.info($d);
end

rule "Set g and q"
	when
		$action : Generate($p : particle, $g : g, $q : q)
		not(Processed($action ;))
	then
		modify($p) {
			setG($g),
			setQ($q);
		}
		
		insert(new Processed($action));
		logger.info($action);
end

rule "Process Allocations"
	when
		$a : Allocate($p : particle, $q : quantity)
		not Processed($a ;) 
	then
		logger.info("Processing allocation: " + $a);
		
		modify($p) {
			setAllocated($q);
		}
		
		insert(new Processed($a));
end

rule "Process Appropriate"
	salience -5 + $o
	when
		$a : Appropriate($particle : particle, $q : quantity)
		not Processed($a ;)
		$al : Allocate(particle == $particle, $alQ : quantity, $o : order)
		MemberOf(particle == $particle, $n : network)
		$pool : AllocationPool(network == $n)
	then
		double canTake = Math.min($pool.getQuantity(), $q);
		
		modify($particle) {
			setAppropriated(canTake);
		}
		
		modify($pool) {
			setQuantity($pool.getQuantity() - canTake);
		}
		
		insert(new Processed($a));
		logger.info("Processing appropriate: " + $a);
end

rule "Create network"
	salience 20
	when
		$a : CreateNetwork($n : network, $p : particle)
		not Processed($a ;)
	then
		insert(new Processed($a));
		logger.info("Created " + $a.getNetwork() + " with alloc " 
			+ $a.getNetwork().getAllocationMethod() + " for particles: " 
			+ $a.getParticle() + ", " + $a.getCollidedParticle());	
end

rule "Join network"
	salience 11
	when
		$j : JoinNetwork($n : network, $p : particle)
		not Processed($j ;)
	then		
		insert(new Processed($j));
		logger.info("Joined network: " + $p + ", " + $n);
end

rule "Leave network"
	salience 12
	when
		$a : LeaveNetwork($n : network, $p : particle)
		not Processed($a ;)
	then			
		insert(new Processed($a));
		insert(new LeftNetwork($n));
		logger.info("Left " + $n + " : " + $p);
end

rule "Check empty network"
	salience 10
	when
		$n : Network()
		not(exists(MemberOf(network == $n)))
		$l : LeftNetwork(network == $n)
	then
		retract($n);
		retract($l);
		logger.info("Deleting network: " + $n);
end

rule "Surplus allocated pool"
	salience -100
	no-loop
	when
		$r : Round(type == RoundType.APPROPRIATE)
		$n : Network()
		$a : AllocationPool()
		not(Processed($a ;))
	then
		logger.info($a.getQuantity() + " pool surplus");
		
		modify($a) {
			setQuantity(0);
		}
		
		insert(new Processed($a));
end

rule "Update network state for round"
	salience -99
	when
		$r : Round(type == RoundType.DEMAND)
		$n : Network($utility : utilityData)
		$poolMembers : List(size > 0) from accumulate(MemberOf(network == $n, $p : particle), collectList($p))
	then
		List members = new ArrayList($poolMembers);
		Iterator it = members.iterator();
		$n.incrementLongevity();
		
		logger.info($n.toString() + " aggregating state.");
		
		while(it.hasNext()) {
			Particle p = (Particle) it.next();
			$utility.addValue(p.getUtility());
		}

		if (storage != null) {
			storage.getSimulation().getEnvironment().setProperty("n"+ $n.getId() +"-longevity",
					$r.getNumber(),
					Integer.toString($n.getLongevity()));
			storage.getSimulation().getEnvironment().setProperty("n"+ $n.getId() +"-utility-sum",
					$r.getNumber(),
					Double.toString($utility.getSum()));
			storage.getSimulation().getEnvironment().setProperty("n"+ $n.getId() +"-utility-avg",
					$r.getNumber(),
					Double.toString($utility.getMean()));
			storage.getSimulation().getEnvironment().setProperty("n"+ $n.getId() +"-utility-std",
					$r.getNumber(),
					Double.toString($utility.getStandardDeviation()));
			storage.getSimulation().getEnvironment().setProperty("n"+ $n.getId() +"-monitoringLevel",
					$r.getNumber(),
					Double.toString($n.getMonitoringLevel()));
		}
end

rule "Prune processed"
	when
		$p : Processed($o : act)
		not Object(this == $o)
	then
		retract($p);
end
