package spinworld

import java.lang.Math
import java.util.Collections
import java.util.List
import java.util.ArrayList
import java.util.Iterator

import spinworld.actions.*
import spinworld.facts.*
import spinworld.network.*
import spinworld.RoundType
import spinworld.Globals
import spinworld.GraduationLevel

global org.apache.log4j.Logger logger
global java.util.Random rnd

declare Violation
	@role(event)
	particle : Particle	@key
	network : spinworld.network.Network	@key
	time : int	@key
	severity : double
	on : String
end

declare Monitored
	@role(event)
	particle : Particle	@key
	network : spinworld.network.Network	@key
	time : int	@key
end

declare Sanction
	@role(event)
	particle : Particle	@key
	network : spinworld.network.Network	@key
	time : int	@key
	level : GraduationLevel
end

declare TaskComplete
	@role(event)
	task : String	@key
	time : int	@key
end

query compliantRound(Network n, Particle p, int $t)
	not(exists(Violation($p, $n, $t;)))
end

rule "Monitor particles"
	salience 5 // After provision
	no-loop
	when
		Round($t : number, type == RoundType.DEMAND)
		not TaskComplete("monitoring", $t;)
		$n : Network(monitoringLevel > 0)
		$pool : ProvisionPool(network == $n)
		$alp : AllocationPool(network == $n)
		$poolMembers : List(size > 0) from accumulate(MemberOf(network == $n, $p : particle), collectList($p))
	then
		int toMonitor = (int) Math.ceil($poolMembers.size() * $n.getMonitoringLevel());
		logger.info("Monitoring " + toMonitor + " particles.");
		
		List members = new ArrayList($poolMembers);
		Collections.shuffle(members);
		Iterator it = members.iterator();
		double resources = $pool.getQuantity();
		
		while(resources > $n.getMonitoringCost() && toMonitor-- > 0 && it.hasNext()) {
			Particle p = (Particle) it.next();
			Monitored m = new Monitored(p, $n, $t);
			insert(m);
			resources -= $n.getMonitoringCost(); 
			logger.info(m);
		}
		
		modify($pool) {
			setQuantity(resources);
		}
		
		modify($alp) {
			setQuantity(resources);
		} 
		
		logger.info("Pool is now: " + $pool);
		insert(new TaskComplete("monitoring", $t));
end

rule "Sanction particles"
	salience 10
	when 
		Round($t : number, type == RoundType.APPROPRIATE)
		not TaskComplete("sanctioning", $t;)
		Violation($p : particle, $n : network, time == $t, $s : severity)
	then
		if($s < 0.1) {
			Sanction sanc = new Sanction($p, $n, $t, GraduationLevel.NO_SANCTION);
			insert(sanc);
			logger.info(sanc);
		}
		else if($s >= 0.1 && $s < 0.7) {
			Sanction sanc = new Sanction($p, $n, $t, GraduationLevel.WARNING);
			insert(sanc);
			logger.info(sanc);	
		}
		else if($s >= 0.7 && $s <= 1) {
			Sanction sanc = new Sanction($p, $n, $t, GraduationLevel.EXPULSION);
			insert(sanc);
			logger.info(sanc);	
		}
		
		insert(new TaskComplete("sanctioning", $t));
end
	
rule "Detect cheat on provision"
	salience 1
	when
		Round($t : number, type == RoundType.APPROPRIATE)
		MemberOf($p : particle, $n : network)
		Monitored($p, $n, $t ;)
		Generate(t == $t, $g : g, $q : q, particle == $p)
		$provision : Provision(particle == $p, t == $t, quantity < $g)
		$pool : AllocationPool(network == $n)
	then
		double resources = $pool.getQuantity();

		Violation v = new Violation($p, $n, $t);
		v.setSeverity(($g - $provision.getQuantity())/resources);
		v.setOn("provision");
		
		logger.info(v);
		insert(v);
end

rule "Detect cheat on demand"
	salience 1
	when
		Round($t : number, type == RoundType.APPROPRIATE)
		MemberOf($p : particle, $n : network)
		Monitored($p, $n, $t ;)
		Generate(t == $t, $g : g, $q : q, particle == $p)
		$demand : Demand(particle == $p, t == $t, quantity > $q)
		$pool : AllocationPool(network == $n)
	then
		double resources = $pool.getQuantity();
	
		Violation v = new Violation($p, $n, $t);
		v.setSeverity(($demand.getQuantity() - $q)/resources);
		v.setOn("demand");
		
		logger.info(v);
		insert(v);
end

rule "Detect cheat on appropriate"
	salience 1
	when
		Round($t : number, type == RoundType.APPROPRIATE)
		MemberOf($p : particle, $n : network)
		Monitored($p, $n, $t ;)
		Generate(t == $t, $g : g, $q : q, particle == $p)
		Allocate($r : quantity, particle == $p, t == $t)
		$approp : Appropriate($rP : quantity, particle == $p, t == $t, quantity > $r)
		$pool : AllocationPool(network == $n)
	then
		double resources = $pool.getQuantity();
	
		Violation v = new Violation($p, $n, $t);
		v.setSeverity(($approp.getQuantity() - $r)/resources);
		v.setOn("appropriate");
		
		logger.info(v);
		insert(v);
end

rule "Prune monitored"
	when
		Round($t : number)
		$m : Monitored($t > time + 10)
	then
		retract($m);
end

rule "Prune tasks"
	when
		Round($t : number)
		$n : TaskComplete($t > time + 10)
	then
		retract($n);
end
